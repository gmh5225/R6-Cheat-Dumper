#include "game_util.h"

#include "../config.hpp"
#include "../globals.hpp"
#include "../offsets.hpp"
#include "../util/math/constants.hpp"

bool game::in_match() {
	const auto game_state = globals::memory.read<int8_t>(globals::round_manager + 0x2e8);
	// in action phase, or in preparation phase
	return game_state == 2 || game_state == 3;
}

int game::gamestate() {
	return globals::memory.read<int8_t>(globals::round_manager + 0x2E8);
}

int game::state() {
	/*
	Menu = 0
	Choose local of spawn (defense/attack) = 3
	Choose operator = 1
	Personalize the operator = 2
	Waiting for other players = 4
	Loading game / In game/ Finishing the game = 6
	*/

	uintptr_t chain = globals::memory.read<uint64_t>(globals::game_manager + 0x20);
	chain = globals::memory.read<uintptr_t>(chain + 0x260);
	chain = globals::memory.read<uintptr_t>(chain + 0x50);
	chain = globals::memory.read<uintptr_t>(chain + 0x0);

	if (chain != 0)
		return globals::memory.read<int>(chain + 0x128);

	return 0;
}

entity game::get_local_entity() {
	uintptr_t chain = globals::memory.read<uintptr_t>(globals::game_profile + 0x68);
	chain = globals::memory.read<uintptr_t>(chain + 0x0);

	if (chain != 0)
		return globals::memory.read<uintptr_t>(chain + 0x28);
	
	/*uintptr_t chain = globals::memory.read<uintptr_t>(globals::game_profile + 0x78);
	chain = globals::memory.read<uintptr_t>(chain + 0x0);

	if (chain != 0)
		return globals::memory.read<uintptr_t>(chain + 0x28);*/

	return 0;
}

uint64_t game::get_profile() {
	uintptr_t player_profile_ptr = globals::memory.read<uintptr_t>(globals::game_profile + 0x68);

	if (player_profile_ptr != 0)
		return globals::memory.read<uint64_t>(player_profile_ptr);

	return 0;
}

bool game::update_addresses() {
	globals::game_manager = globals::memory.read<uintptr_t>(globals::module_base + offsets::game_manager);
	globals::game_profile = globals::memory.read<uintptr_t>(globals::module_base + offsets::game_profile);
	globals::round_manager = globals::memory.read<uintptr_t>(globals::module_base + offsets::round_manager);
	globals::network_manager = globals::memory.read<uintptr_t>(globals::module_base + offsets::network_manager);
	globals::input_manager = globals::memory.read<uintptr_t>(globals::module_base + offsets::input_manager);
	globals::vtable = globals::memory.read<uintptr_t>(globals::module_base + offsets::vtable);
	globals::glow_manager = globals::memory.read<uintptr_t>(globals::module_base + offsets::glow_manager);
	globals::fov_manager = globals::memory.read<uintptr_t>(globals::module_base + offsets::fov_manager);
	globals::freeze_manager = globals::memory.read<uintptr_t>(globals::module_base + offsets::freeze_manager);

	if (globals::game_manager == 0 || globals::game_profile == 0 || globals::round_manager == 0 || globals::network_manager == 0 || globals::input_manager  == 0 || globals::vtable == 0 || globals::glow_manager == 0 || globals::fov_manager == 0 || globals::freeze_manager == 0)
		return false;

	return true;
}

vec3_t game::get_angle_to(vec3_t enemy_position, vec3_t local_position) {
	vec3_t dir = enemy_position - local_position;

	float x = (float)(asin(dir.z / dir.length()) * (180 / math::pi));
	float z = atan(dir.y / dir.x) * 57.2958f;

	if (dir.x >= 0.f) z += 180.f;
	if (x > 179.99f) x -= 360.f;
	else if (x < -179.99f) x += 360.f;

	return vec3_t(x, 0.f, z + 90.f);
}

void game::clamp_angles(vec3_t& angle) {
	if (angle.x > 75.f) angle.x = 75.f;
	else if (angle.x < -75.f) angle.x = -75.f;
	if (angle.z < -180) angle.z += 360;
	else if (angle.z > 180) angle.z -= 360;
}

vec4_t game::create_from_yaw_pitch_roll(float yaw, float pitch, float roll) {
	vec4_t result;

	float sr, cr, sp, cp, sy, cy;

	float halfRoll = roll * 0.5f;
	sr = sin(halfRoll);
	cr = cos(halfRoll);

	float halfPitch = pitch * 0.5f;
	sp = sin(halfPitch);
	cp = cos(halfPitch);

	float halfYaw = yaw * 0.5f;
	sy = sin(halfYaw);
	cy = cos(halfYaw);

	result.x = cy * sr * cp - sy * cr * sp;
	result.y = cy * cr * sp + sy * sr * cp;
	result.z = sy * cr * cp - cy * sr * sp;
	result.w = cy * cr * cp + sy * sr * sp;
	return result;
}

bool game::skip_bad_angle(vec4_t target_angle, vec4_t local_angle) {
	vec4_t difference = (target_angle - local_angle).abs_v();
	float aim_override = 3.75f / 100.f;

	if (difference.x > aim_override || difference.y > aim_override ||
		difference.z > aim_override || difference.w > aim_override)
		return true;

	return false;
}

bool game::update_display_size() {
	uintptr_t chain = globals::memory.read<uintptr_t>(globals::fov_manager + 0x168);
	chain = globals::memory.read<uintptr_t>(chain + 0x0);
	chain = globals::memory.read<uintptr_t>(chain + 0x148);
	chain = globals::memory.read<uintptr_t>(chain + 0x40);
	chain = globals::memory.read<uintptr_t>(chain + 0x30);

	if (chain != 0) {
		globals::window_horizontal_size = globals::memory.read<int>(chain + 0xBC);
		globals::window_vertical_size = globals::memory.read<int>(chain + 0xC0);
		return true;
	}

	return false;
}

uintptr_t get_camera() {
	uintptr_t chain = globals::memory.read<uintptr_t>(globals::game_profile + offsets::game_profile_chain1);
	chain = globals::memory.read<uintptr_t>(chain + offsets::game_profile_chain2);
	chain = globals::memory.read<uintptr_t>(chain + offsets::game_profile_chain3);

	if (chain != 0)
		return globals::memory.read<uintptr_t>(chain + offsets::game_profile_chain4);

	return 0;
}

bool game::update_view_translation() {
	uintptr_t game_camera = get_camera();

	if (game_camera == 0)
		return false;

	globals::camera_view_right = globals::memory.read<vec3_t>(game_camera + offsets::camera_view_right);
	globals::camera_view_up = globals::memory.read<vec3_t>(game_camera + offsets::camera_view_up);
	globals::camera_view_forward = globals::memory.read<vec3_t>(game_camera + offsets::camera_view_forward);
	globals::camera_view_translation = globals::memory.read<vec3_t>(game_camera + offsets::camera_view_translation);
	globals::camera_view_fovx = globals::memory.read<float>(game_camera + offsets::camera_view_fovx);
	globals::camera_view_fovy = globals::memory.read<float>(game_camera + offsets::camera_view_fovy);

	return true;
}

vec3_t game::w2s(vec3_t position) {
	vec3_t temp = position - globals::camera_view_translation;
	return vec3_t((globals::window_horizontal_size / 2) * (1 + temp.dot(globals::camera_view_right) / globals::camera_view_fovx / temp.dot(globals::camera_view_forward * -1)),
		(globals::window_vertical_size / 2) * (1 - temp.dot(globals::camera_view_up) / globals::camera_view_fovy / temp.dot(globals::camera_view_forward * -1)),
		temp.dot(globals::camera_view_forward * -1));
}

entity::entity(uintptr_t obj) {
	this->_obj = obj;
}

bool entity::operator ==(const entity& other) {
	return this->_obj == other._obj;
}

uintptr_t entity::get_obj() {
	return this->_obj;
}

int entity::get_team() {
	uintptr_t chain = globals::memory.read<uintptr_t>(this->_obj + offsets::game_manager_entity_list);
	chain = globals::memory.read<uintptr_t>(chain + 0x88);

	if (chain != 0)
		return globals::memory.read<int8_t>(chain + 0x30);

	return 0;
}

void entity::set_team(int value) {
	uintptr_t chain = globals::memory.read<uintptr_t>(this->_obj + offsets::game_manager_entity_list);
	chain = globals::memory.read<uintptr_t>(chain + 0x88);

	if (chain != 0)
		globals::memory.write<int8_t>(chain + 0x30, value);
}

int entity::get_health() {
	uintptr_t chain = globals::memory.read<uintptr_t>(this->_obj + offsets::entity_entity_info);
	chain = globals::memory.read<uintptr_t>(chain + offsets::entity_info_main_component);
	chain = globals::memory.read<uintptr_t>(chain + offsets::main_component_child_component);

	if (chain != 0)
		return globals::memory.read<int8_t>(chain + offsets::child_component_health_int);

	return 0;
}

int entity::get_ctu() {
	uintptr_t chain = globals::memory.read<uintptr_t>(this->_obj + 0xc8);

	if (chain != 0)
		return globals::memory.read<uint8_t>(chain + 0x194);

	return 0;
}

int entity::get_hero() {
	uintptr_t chain = globals::memory.read<uintptr_t>(this->_obj + 0xc8);

	if (chain != 0)
		return globals::memory.read<int8_t>(chain + 0x195);

	return 0;
}

std::string operator_name[100][10] = {
	{"RECRUIT","SMOKE","MUTE","SLEDGE","THATCHER"},
	{"","CASTLE","ASH","PULSE","THERMITE",""},
	{"","DOC","ROOK","TWITCH","MONTAGNE",""},
	{"","GLAZ","FUZE","KAPKAN","TACHANKA",""},
	{"","BLITZ","IQ","JAGER","BANDIT",""},
	{"","BUCK","FROST","","",""},
	{"","BLACKBEARD","VALKYRIE","","",""},
	{"","CAPITAO","CAVEIRA","","",""},
	{"","HIBANA","ECHO","","",""},
	{"","JACKAL","MIRA","","",""},
	{"","YING","LESION","","",""},
	{"","ELA","ZOFIA","","",""},
	{"","DOKKAEBI","VIGIL","","",""},
	{"","","LION","FINKA","",""},
	{"","MAESTRO","ALIBI","","",""},
	{"","MAVERICK","CLASH","","",""},
	{"","NOMAD","KAID","","",""},
	{"","MOZZIE","GRIDLOCK","","",""},
	{"","NOKK","","","",""},
	{"","WARDEN","","","",""},
	{"","GOYO","","","",""},
	{"","AMARU","","","",""},
	{"","KALI","WAMAI","","",""},
	{"","ORYX"},
	{"","IANA"}
};

int bone_ids[100][10][17] = { //[CTU][OP]
	{//head high_neck low_neck r_shoulder l_shoulder r_elbow l_elbow r_hand l_hand high_stomach low_stomach pelvis r_knee l_knee r_foot l_foot
		{0x38,0x34,0x33,0x07,0x58,0x08,0x59,0x09,0x54,0x05,0x04,0x02,0xAC,0xB6,0xAD,0xB7},//RECRUIT
		{0x38,0x34,0x33,0x07,0x41,0x08,0x42,0x09,0x43,0x05,0x04,0x02,0x9B,0xA6,0x9C,0xA7},//SMOKE
		{0x38,0x34,0x33,0x07,0x37,0x08,0x38,0x09,0x39,0x05,0x04,0x02,0x87,0x93,0x88,0x94},//MUTE
		{0x38,0x34,0x33,0x07,0x56,0x08,0x57,0x09,0x58,0x05,0x04,0x02,0xA9,0xB4,0xAA,0xB5},//SLEDGE
		{0x38,0x34,0x33,0x07,0x38,0x08,0x39,0x09,0x3A,0x05,0x04,0x02,0x89,0x94,0x8A,0x95},//THATCHER
	},//0
	{
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//empty
		{0x39,0x35,0x34,0x07,0x59,0x08,0x5A,0x09,0x5B,0x05,0x04,0x02,0xB7,0xC1,0xB8,0xC2},//CASTLE
		{0x37,0x33,0x32,0x07,0x60,0x08,0x61,0x09,0x62,0x05,0x04,0x02,0xC0,0xCA,0xC1,0xCB},//ASH
		{0x39,0x35,0x34,0x07,0x60,0x08,0x61,0x09,0x62,0x05,0x04,0x02,0xBE,0xC8,0xBF,0xC9},//PULSE
		{0x38,0x34,0x33,0x07,0x5F,0x08,0x60,0x09,0x61,0x05,0x04,0x02,0xB7,0xC0,0xB8,0xC1},//THERMITE
	},//1
	{
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//empty
		{0x3A,0x36,0x35,0x07,0x5D,0x08,0x5E,0x09,0x5F,0x05,0x04,0x02,0xB8,0xC3,0xB9,0xC4},//DOC
		{0x3A,0x36,0x35,0x07,0x5D,0x08,0x5E,0x09,0x5F,0x05,0x04,0x02,0xB8,0xC3,0xB9,0xC4},//ROOK
		{0x3C,0x38,0x37,0x07,0x5F,0x08,0x60,0x09,0x61,0x05,0x04,0x02,0xBE,0xC9,0xBF,0xCA},//TWITCH
		{0x3C,0x38,0x37,0x07,0x66,0x08,0x67,0x09,0x68,0x05,0x04,0x02,0xCA,0xD5,0xCB,0xD6},//MONTAGNE
	},//2
	{
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//empty
		{0x37,0x33,0x32,0x07,0x53,0x08,0x54,0x09,0x55,0x05,0x04,0x02,0xA3,0xAB,0xA4,0xAC},//GLAZ
		{0x38,0x34,0x33,0x07,0x54,0x08,0x55,0x09,0x56,0x05,0x04,0x02,0xAA,0xB1,0xAB,0xB2},//FUZE
		{0x38,0x34,0x33,0x07,0x54,0x08,0x55,0x09,0x56,0x05,0x04,0x02,0xA9,0xB1,0xAA,0xB2},//KAPKAN
		{0x38,0x34,0x33,0x07,0x54,0x08,0x55,0x09,0x56,0x05,0x04,0x02,0xA9,0xB1,0xAA,0xB2},//TACHANKA
	},//3
	{
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//empty
		{0x3A,0x36,0x35,0x07,0x5D,0x08,0x5E,0x09,0x5F,0x05,0x04,0x02,0xBB,0xC4,0xBC,0xC5},//BLITZ
		{0x39,0x35,0x34,0x07,0x5B,0x08,0x5C,0x09,0x5D,0x05,0x04,0x02,0xB3,0xBC,0xB4,0xBD},//IQ
		{0x38,0x34,0x33,0x07,0x5F,0x08,0x60,0x09,0x61,0x05,0x04,0x02,0xB5,0xBF,0xB6,0xC0},//JAGER
		{0x38,0x34,0x33,0x07,0x5F,0x08,0x60,0x09,0x61,0x05,0x04,0x02,0xB5,0xBF,0xB6,0xC0},//BANDIT
	},//4
	{
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//empty
		{0x37,0x33,0x32,0x07,0x5E,0x08,0x5F,0x09,0x60,0x05,0x04,0x02,0xB5,0xBE,0xB6,0xBF},//BUCK
		{0x38,0x35,0x34,0x07,0x60,0x08,0x61,0x09,0x62,0x05,0x04,0x02,0xB8,0xC2,0xB9,0xC3},//FROST
		{0x00,0x00,0x00,0x07,0x00,0x08,0x00,0x09,0x00,0x05,0x04,0x02,0x00,0x00,0x00,0x00},//empty
		{0x00,0x00,0x00,0x07,0x00,0x08,0x00,0x09,0x00,0x05,0x04,0x02,0x00,0x00,0x00,0x00},//empty
	},//5
	{
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//empty
		{0x36,0x32,0x31,0x07,0x52,0x08,0x53,0x09,0x54,0x05,0x04,0x02,0x8E,0x96,0x8F,0x97},//BLACKBEARD
		{0x36,0x32,0x31,0x07,0x52,0x08,0x53,0x09,0x54,0x05,0x04,0x02,0x8E,0x96,0x8F,0x97},//VALKYRIE
		{0x00,0x00,0x00,0x07,0x00,0x08,0x00,0x09,0x00,0x05,0x04,0x02,0x00,0x00,0x00,0x00},//empty
		{0x00,0x00,0x00,0x07,0x00,0x08,0x00,0x09,0x00,0x05,0x04,0x02,0x00,0x00,0x00,0x00},//empty
	},//6
	{
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//empty
		{0x37,0x33,0x32,0x07,0x5E,0x08,0x5F,0x09,0x60,0x05,0x04,0x02,0xB4,0xBD,0xB5,0xBE},//CAPITAO
		{0x36,0x32,0x31,0x07,0x55,0x08,0x56,0x09,0x57,0x05,0x04,0x02,0x91,0x99,0x92,0x9A},//CAVEIRA
		{0x00,0x00,0x00,0x07,0x00,0x08,0x00,0x09,0x00,0x05,0x04,0x02,0x00,0x00,0x00,0x00},//empty
		{0x00,0x00,0x00,0x07,0x00,0x08,0x00,0x09,0x00,0x05,0x04,0x02,0x00,0x00,0x00,0x00},//empty
	},//7
	{
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//empty
		{0x37,0x33,0x32,0x07,0x53,0x08,0x54,0x09,0x55,0x05,0x04,0x02,0x90,0x9A,0x91,0x9B},//HIBANA
		{0x36,0x32,0x31,0x07,0x52,0x08,0x53,0x09,0x54,0x05,0x04,0x02,0x8E,0x97,0x8F,0x98},//ECHO
		{0x00,0x00,0x00,0x07,0x00,0x08,0x00,0x09,0x00,0x05,0x04,0x02,0x00,0x00,0x00,0x00},//empty
		{0x00,0x00,0x00,0x07,0x00,0x08,0x00,0x09,0x00,0x05,0x04,0x02,0x00,0x00,0x00,0x00},//empty
	},//8
	{
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//empty
		{0x38,0x34,0x33,0x07,0x5B,0x08,0x5C,0x09,0x5D,0x05,0x04,0x02,0xB1,0xBB,0xB2,0xBC},//JACKAL
		{0x36,0x32,0x31,0x07,0x52,0x08,0x53,0x09,0x54,0x05,0x04,0x02,0x8E,0x96,0x8F,0x97},//MIRA
		{0x00,0x00,0x00,0x07,0x00,0x08,0x00,0x09,0x00,0x05,0x04,0x02,0x00,0x00,0x00,0x00},//empty
		{0x00,0x00,0x00,0x07,0x00,0x08,0x00,0x09,0x00,0x05,0x04,0x02,0x00,0x00,0x00,0x00},//empty
	},//9
	{
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//empty
		{0x37,0x33,0x32,0x07,0x5E,0x08,0x5F,0x09,0x60,0x05,0x04,0x02,0xAC,0xB6,0xAD,0xB7},//YING
		{0x36,0x32,0x31,0x07,0x5D,0x08,0x5E,0x09,0x5F,0x05,0x04,0x02,0xA2,0xAA,0xA3,0xAB},//LESION
		{0x00,0x00,0x00,0x07,0x00,0x08,0x00,0x09,0x00,0x05,0x04,0x02,0x00,0x00,0x00,0x00},//empty
		{0x00,0x00,0x00,0x07,0x00,0x08,0x00,0x09,0x00,0x05,0x04,0x02,0x00,0x00,0x00,0x00},//empty
	},//10
	{
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//empty
		{0x36,0x32,0x31,0x07,0x56,0x08,0x57,0x09,0x58,0x05,0x04,0x02,0x92,0x9A,0x93,0x9B},//ELA
		{0x36,0x32,0x31,0x07,0x57,0x08,0x58,0x09,0x59,0x05,0x04,0x02,0xA1,0xAC,0xA2,0xAD},//ZOFIA
		{0x00,0x00,0x00,0x07,0x00,0x08,0x00,0x09,0x00,0x05,0x04,0x02,0x00,0x00,0x00,0x00},//empty
		{0x00,0x00,0x00,0x07,0x00,0x08,0x00,0x09,0x00,0x05,0x04,0x02,0x00,0x00,0x00,0x00},//empty
	},//11
	{
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//empty
		{0x39,0x35,0x34,0x07,0x62,0x08,0x63,0x09,0x64,0x05,0x04,0x02,0xBC,0xC7,0xBD,0xC8},//DOKKAEBI
		{0x37,0x33,0x32,0x07,0x5E,0x08,0x5F,0x09,0x60,0x05,0x04,0x02,0xAB,0xB6,0xAC,0xB7},//VIGIL
		{0x00,0x00,0x00,0x07,0x00,0x08,0x00,0x09,0x00,0x05,0x04,0x02,0x00,0x00,0x00,0x00},//empty
		{0x00,0x00,0x00,0x07,0x00,0x08,0x00,0x09,0x00,0x05,0x04,0x02,0x00,0x00,0x00,0x00},//empty
	},//12
	{
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//empty
		{0x00,0x00,0x00,0x07,0x00,0x08,0x00,0x09,0x00,0x05,0x04,0x02,0x00,0x00,0x00,0x00},//empty
		{0x39,0x35,0x34,0x07,0x5C,0x08,0x5D,0x09,0x5E,0x05,0x04,0x02,0xB6,0xC1,0xB7,0xC2},//LION
		{0x36,0x32,0x31,0x07,0x52,0x08,0x53,0x09,0x54,0x05,0x04,0x02,0x8F,0x98,0x90,0x99},//FINKA
		{0x00,0x00,0x00,0x07,0x00,0x08,0x00,0x09,0x00,0x05,0x04,0x02,0x00,0x00,0x00,0x00},//empty
	},//13
	{
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//empty
		{0x3A,0x36,0x35,0x07,0x5A,0x08,0x5B,0x09,0x5C,0x05,0x04,0x02,0xB7,0xC1,0xB8,0xC2},//MAESTRO
		{0x38,0x34,0x33,0x07,0x5C,0x08,0x5D,0x09,0x5E,0x05,0x04,0x02,0xB2,0xB9,0xB3,0xBA},//ALIBI
		{0x00,0x00,0x00,0x07,0x00,0x08,0x00,0x09,0x00,0x05,0x04,0x02,0x00,0x00,0x00,0x00},//empty
		{0x00,0x00,0x00,0x07,0x00,0x08,0x00,0x09,0x00,0x05,0x04,0x02,0x00,0x00,0x00,0x00},//empty
	},//14
	{
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//empty
		{0x3A,0x36,0x35,0x07,0x5A,0x08,0x5B,0x09,0x5C,0x05,0x04,0x02,0xB6,0xC2,0xB7,0xC3},//MAVERICK
		{0x36,0x32,0x31,0x07,0x56,0x08,0x57,0x09,0x58,0x05,0x04,0x02,0xAF,0xB8,0xB0,0xB9},//CLASH
		{0x00,0x00,0x00,0x07,0x00,0x08,0x00,0x09,0x00,0x05,0x04,0x02,0x00,0x00,0x00,0x00},//empty
		{0x00,0x00,0x00,0x07,0x00,0x08,0x00,0x09,0x00,0x05,0x04,0x02,0x00,0x00,0x00,0x00},//empty
	},//15
	{
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//empty
		{0x36,0x32,0x31,0x07,0x52,0x08,0x53,0x09,0x54,0x05,0x04,0x02,0x8E,0x97,0X8F,0x98},//NOMAD
		{0x36,0x32,0x31,0x07,0x52,0x08,0x53,0x09,0x54,0x05,0x04,0x02,0x8E,0x97,0X8F,0x98},//KAID
		{0x00,0x00,0x00,0x07,0x00,0x08,0x00,0x09,0x00,0x05,0x04,0x02,0x00,0x00,0x00,0x00},//empty
		{0x00,0x00,0x00,0x07,0x00,0x08,0x00,0x09,0x00,0x05,0x04,0x02,0x00,0x00,0x00,0x00},//empty
	},//16
	{
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//empty
		{0x36,0x32,0x31,0x07,0x52,0x08,0x53,0x09,0x54,0x05,0x04,0x02,0x8E,0x96,0x8F,0x97},//MOZZIE
		{0x36,0x32,0x31,0x07,0x58,0x08,0x59,0x09,0x5A,0x05,0x04,0x02,0x99,0xA2,0x9A,0xA3},//GRIDLOCK
		{0x00,0x00,0x00,0x07,0x00,0x08,0x00,0x09,0x00,0x05,0x04,0x02,0x00,0x00,0x00,0x00},//empty
		{0x00,0x00,0x00,0x07,0x00,0x08,0x00,0x09,0x00,0x05,0x04,0x02,0x00,0x00,0x00,0x00},//empty
	},//17
	{
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//empty
		{0x38,0x34,0x33,0x07,0x41,0x08,0x42,0x09,0x43,0x05,0x04,0x02,0x80,0x88,0x81,0x89},//NOKK
		{0x00,0x00,0x00,0x07,0x00,0x08,0x00,0x09,0x00,0x05,0x04,0x02,0x00,0x00,0x00,0x00},//empty
		{0x00,0x00,0x00,0x07,0x00,0x08,0x00,0x09,0x00,0x05,0x04,0x02,0x00,0x00,0x00,0x00},//empty
		{0x00,0x00,0x00,0x07,0x00,0x08,0x00,0x09,0x00,0x05,0x04,0x02,0x00,0x00,0x00,0x00},//empty
	},//18
	{
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//empty
		{0x39,0x35,0x34,0x07,0x5F,0x08,0x60,0x09,0x61,0x05,0x04,0x02,0xC0,0xCB,0xC1,0xCC},//WARDEN
		{0x00,0x00,0x00,0x07,0x00,0x08,0x00,0x09,0x00,0x05,0x04,0x02,0x00,0x00,0x00,0x00},//empty
		{0x00,0x00,0x00,0x07,0x00,0x08,0x00,0x09,0x00,0x05,0x04,0x02,0x00,0x00,0x00,0x00},//empty
		{0x00,0x00,0x00,0x07,0x00,0x08,0x00,0x09,0x00,0x05,0x04,0x02,0x00,0x00,0x00,0x00},//empty
	},//19
	{
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//empty
		{0x36,0x32,0x31,0x07,0x52,0x08,0x53,0x09,0x54,0x05,0x04,0x02,0x8E,0x97,0x8F,0x98},//GOYO
		{0x00,0x00,0x00,0x07,0x00,0x08,0x00,0x09,0x00,0x05,0x04,0x02,0x00,0x00,0x00,0x00},//empty
		{0x00,0x00,0x00,0x07,0x00,0x08,0x00,0x09,0x00,0x05,0x04,0x02,0x00,0x00,0x00,0x00},//empty
		{0x00,0x00,0x00,0x07,0x00,0x08,0x00,0x09,0x00,0x05,0x04,0x02,0x00,0x00,0x00,0x00},//empty
	},//20
	{
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//empty
		{0x36,0x32,0x31,0x07,0x57,0x08,0x58,0x09,0x59,0x05,0x04,0x02,0x9E,0xA7,0x9F,0xA8},//AMARU
		{0x00,0x00,0x00,0x07,0x00,0x08,0x00,0x09,0x00,0x05,0x04,0x02,0x00,0x00,0x00,0x00},//empty
		{0x00,0x00,0x00,0x07,0x00,0x08,0x00,0x09,0x00,0x05,0x04,0x02,0x00,0x00,0x00,0x00},//empty
		{0x00,0x00,0x00,0x07,0x00,0x08,0x00,0x09,0x00,0x05,0x04,0x02,0x00,0x00,0x00,0x00},//empty
	},//21
	{
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//empty
		{0x36,0x32,0x31,0x07,0x58,0x08,0x59,0x09,0x60,0x05,0x04,0x02,0x97,0xA0,0x98,0xA1},//KALI
		{0x36,0x32,0x31,0x07,0x52,0x08,0x53,0x09,0x54,0x05,0x04,0x02,0x8E,0x97,0x8F,0x98},//WAMAI
		{0x00,0x00,0x00,0x07,0x00,0x08,0x00,0x09,0x00,0x05,0x04,0x02,0x00,0x00,0x00,0x00},//empty
		{0x00,0x00,0x00,0x07,0x00,0x08,0x00,0x09,0x00,0x05,0x04,0x02,0x00,0x00,0x00,0x00},//empty
	},//22
	{
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//empty
		{0x36,0x32,0x31,0x07,0x7A,0x08,0x71,0x09,0x73,0x05,0x04,0x02,0x8D,0x95,0x8e,0x96},//ORXY
		{0x36,0x32,0x31,0x07,0x56,0x08,0x57,0x09,0x59,0x05,0x04,0x02,0xa6,0xac,0xa4,0xad},//IANA
		{0x00,0x00,0x00,0x07,0x00,0x08,0x00,0x09,0x00,0x05,0x04,0x02,0x00,0x00,0x00,0x00},//empty
		{0x00,0x00,0x00,0x07,0x00,0x08,0x00,0x09,0x00,0x05,0x04,0x02,0x00,0x00,0x00,0x00},//empty
	},//23
	{
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//empty
		{0x36,0x32,0x31,0x07,0x56,0x08,0x57,0x09,0x59,0x05,0x04,0x02,0xa6,0xac,0xa4,0xad},//IANA
		{0x36,0x32,0x31,0x07,0x7A,0x08,0x71,0x09,0x73,0x05,0x04,0x02,0x8D,0x95,0x8e,0x96},//ORXY
		{0x00,0x00,0x00,0x07,0x00,0x08,0x00,0x09,0x00,0x05,0x04,0x02,0x00,0x00,0x00,0x00},//empty
		{0x00,0x00,0x00,0x07,0x00,0x08,0x00,0x09,0x00,0x05,0x04,0x02,0x00,0x00,0x00,0x00},//empty
	}//24
};

int entity::get_bone(int ctu, int hero, int id) {
	return bone_ids[hero][ctu][id];
}

std::string entity::get_operator_name() {
	return operator_name[get_ctu()][get_hero()];
}

std::string entity::get_username() {
	uintptr_t chain = globals::memory.read<uintptr_t>(this->_obj + offsets::entity_entity_info);
	chain = globals::memory.read<uintptr_t>(chain + 0x1b0);

	if (chain != 0)
		return globals::memory.read<std::string>(chain); // dosent work?

	return "BOT";
}

vec3_t entity::get_bone_pos(uintptr_t bone) {
	uintptr_t chain = globals::memory.read<uintptr_t>(this->_obj + offsets::entity_ref);

	if (chain != 0)
		return globals::memory.read<vec3_t>(chain + bone);

	return vec3_t();
}

vec4_t entity::get_view_angles() {
	uintptr_t chain = globals::memory.read<uintptr_t>(this->_obj + offsets::entity_ref);
	chain = globals::memory.read<uintptr_t>(chain + 0x1200);

	if (chain != 0)
		return globals::memory.read<vec4_t>(chain + 0xc0);

	return vec4_t();
}

void entity::set_view_angles(vec4_t angles) {
	uintptr_t chain = globals::memory.read<uintptr_t>(this->_obj + offsets::entity_ref);
	chain = globals::memory.read<uintptr_t>(chain + 0x1200);

	if (chain != 0)
		globals::memory.write<vec4_t>(chain + 0xc0, angles);
}

vec4_t entity::get_gun_angles() { // mby outdated
	uintptr_t chain = globals::memory.read<uintptr_t>(this->_obj + 0x90);
	chain = globals::memory.read<uintptr_t>(chain + 0xC8);
	chain = globals::memory.read<uintptr_t>(chain + 0x278);

	if (chain != 0)
		return globals::memory.read<vec4_t>(chain + 0x118);

	return vec4_t();
}

void entity::set_gun_angles(vec4_t angles) {
	uintptr_t chain = globals::memory.read<uintptr_t>(this->_obj + 0x90);
	chain = globals::memory.read<uintptr_t>(chain + 0xC8);
	chain = globals::memory.read<uintptr_t>(chain + 0x278);

	if (chain != 0)
		globals::memory.write<vec4_t>(chain + 0x118, angles);
}

vec3_t calculate_euler(vec4_t quaternion) { // ignore this shit code :)
	return vec3_t(std::atan2(2.f * (quaternion.w * quaternion.z + quaternion.x * quaternion.y), (1.f - 2.f * (quaternion.y * quaternion.y + quaternion.z * quaternion.z))) * 57.2957795131f,
		std::atan2(2.f * (quaternion.w * quaternion.x + quaternion.y * quaternion.z), (1.f - 2.f * (quaternion.x * quaternion.x + quaternion.y * quaternion.y))) * 57.2957795131f,
		0.f);
}

vec3_t calculate_angle(vec3_t translation, vec3_t position) { // credits to paracord for being big contributor
	auto delta = translation - position;

	auto y = -std::asin(delta.z / translation.dist_to(position)) * 57.2957795131f;
	auto x = std::atan2(delta.y, delta.x) * 57.2957795131f;

	return vec3_t(x + 90.f, y, 0.f);
}

void entity::aim_at_entity(entity target, uintptr_t bone) {
	if (target.get_obj() != 0) {
		vec3_t calc_angle = game::get_angle_to(target.get_bone_pos(bone), globals::camera_view_translation);
		game::clamp_angles(calc_angle);

		vec4_t target_angle = game::create_from_yaw_pitch_roll(calc_angle.z * (float)(math::pi / 180), 0, calc_angle.x * (float)(math::pi / 180));

		vec4_t local_angles = get_view_angles();

		if (config::aimbot_silent_enabled) {
			auto new_angle = (calculate_angle(globals::camera_view_translation, target.get_bone_pos(bone)) - calculate_euler(local_angles)) * 0.01745329251f; // works but bad code :(
			set_gun_angles(vec4_t(new_angle.x, new_angle.y, new_angle.z, 0.f));
		}
		else {
			vec4_t angle_difference = target_angle - local_angles; // making this abs fucks up lots of shit
			vec4_t new_angles = local_angles + angle_difference / 5;

			if (!game::skip_bad_angle(new_angles, local_angles)) // its fucked up
				set_view_angles(new_angles);
		}
	}
}

int entity::is_firing() {
	uintptr_t chain = globals::memory.read<uintptr_t>(this->_obj + 0x90);
	chain = globals::memory.read<uintptr_t>(chain + 0xC8);

	if (chain != 0)
		return globals::memory.read<int>(chain + 0x2B8);

	return 0;
}